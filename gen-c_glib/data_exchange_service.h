/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DATA_EXCHANGE_SERVICE_H
#define DATA_EXCHANGE_SERVICE_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "structs_types.h"

/* data_exchange_service service interface */
typedef struct _data_exchange_serviceIf data_exchange_serviceIf;  /* dummy object */

struct _data_exchange_serviceIfInterface
{
  GTypeInterface parent;

  gboolean (*execute) (data_exchange_serviceIf *iface, server_response_T ** _return, const statement_T * stmt, GError **error);
};
typedef struct _data_exchange_serviceIfInterface data_exchange_serviceIfInterface;

GType data_exchange_service_if_get_type (void);
#define TYPE_DATA_EXCHANGE_SERVICE_IF (data_exchange_service_if_get_type())
#define DATA_EXCHANGE_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_EXCHANGE_SERVICE_IF, data_exchange_serviceIf))
#define IS_DATA_EXCHANGE_SERVICE_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_EXCHANGE_SERVICE_IF))
#define DATA_EXCHANGE_SERVICE_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), TYPE_DATA_EXCHANGE_SERVICE_IF, data_exchange_serviceIfInterface))

gboolean data_exchange_service_if_execute (data_exchange_serviceIf *iface, server_response_T ** _return, const statement_T * stmt, GError **error);

/* data_exchange_service service client */
struct _data_exchange_serviceClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _data_exchange_serviceClient data_exchange_serviceClient;

struct _data_exchange_serviceClientClass
{
  GObjectClass parent;
};
typedef struct _data_exchange_serviceClientClass data_exchange_serviceClientClass;

GType data_exchange_service_client_get_type (void);
#define TYPE_DATA_EXCHANGE_SERVICE_CLIENT (data_exchange_service_client_get_type())
#define DATA_EXCHANGE_SERVICE_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_EXCHANGE_SERVICE_CLIENT, data_exchange_serviceClient))
#define DATA_EXCHANGE_SERVICE_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_DATA_EXCHANGE_SERVICE_CLIENT, data_exchange_serviceClientClass))
#define DATA_EXCHANGE_SERVICE_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_EXCHANGE_SERVICE_CLIENT))
#define DATA_EXCHANGE_SERVICE_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA_EXCHANGE_SERVICE_CLIENT))
#define DATA_EXCHANGE_SERVICE_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_EXCHANGE_SERVICE_CLIENT, data_exchange_serviceClientClass))

gboolean data_exchange_service_client_execute (data_exchange_serviceIf * iface, server_response_T ** _return, const statement_T * stmt, GError ** error);
gboolean data_exchange_service_client_send_execute (data_exchange_serviceIf * iface, const statement_T * stmt, GError ** error);
gboolean data_exchange_service_client_recv_execute (data_exchange_serviceIf * iface, server_response_T ** _return, GError ** error);
void data_exchange_service_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void data_exchange_service_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* data_exchange_service handler (abstract base class) */
struct _data_exchange_serviceHandler
{
  GObject parent;
};
typedef struct _data_exchange_serviceHandler data_exchange_serviceHandler;

struct _data_exchange_serviceHandlerClass
{
  GObjectClass parent;

  gboolean (*execute) (data_exchange_serviceIf *iface, server_response_T ** _return, const statement_T * stmt, GError **error);
};
typedef struct _data_exchange_serviceHandlerClass data_exchange_serviceHandlerClass;

GType data_exchange_service_handler_get_type (void);
#define TYPE_DATA_EXCHANGE_SERVICE_HANDLER (data_exchange_service_handler_get_type())
#define DATA_EXCHANGE_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_EXCHANGE_SERVICE_HANDLER, data_exchange_serviceHandler))
#define IS_DATA_EXCHANGE_SERVICE_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_EXCHANGE_SERVICE_HANDLER))
#define DATA_EXCHANGE_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_DATA_EXCHANGE_SERVICE_HANDLER, data_exchange_serviceHandlerClass))
#define IS_DATA_EXCHANGE_SERVICE_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA_EXCHANGE_SERVICE_HANDLER))
#define DATA_EXCHANGE_SERVICE_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_EXCHANGE_SERVICE_HANDLER, data_exchange_serviceHandlerClass))

gboolean data_exchange_service_handler_execute (data_exchange_serviceIf *iface, server_response_T ** _return, const statement_T * stmt, GError **error);

/* data_exchange_service processor */
struct _data_exchange_serviceProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  data_exchange_serviceHandler *handler;
  GHashTable *process_map;
};
typedef struct _data_exchange_serviceProcessor data_exchange_serviceProcessor;

struct _data_exchange_serviceProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _data_exchange_serviceProcessorClass data_exchange_serviceProcessorClass;

GType data_exchange_service_processor_get_type (void);
#define TYPE_DATA_EXCHANGE_SERVICE_PROCESSOR (data_exchange_service_processor_get_type())
#define DATA_EXCHANGE_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_EXCHANGE_SERVICE_PROCESSOR, data_exchange_serviceProcessor))
#define IS_DATA_EXCHANGE_SERVICE_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_EXCHANGE_SERVICE_PROCESSOR))
#define DATA_EXCHANGE_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), TYPE_DATA_EXCHANGE_SERVICE_PROCESSOR, data_exchange_serviceProcessorClass))
#define IS_DATA_EXCHANGE_SERVICE_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA_EXCHANGE_SERVICE_PROCESSOR))
#define DATA_EXCHANGE_SERVICE_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_EXCHANGE_SERVICE_PROCESSOR, data_exchange_serviceProcessorClass))

#endif /* DATA_EXCHANGE_SERVICE_H */
