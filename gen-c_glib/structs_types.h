/**
 * Autogenerated by Thrift Compiler (0.19.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef STRUCTS_TYPES_H
#define STRUCTS_TYPES_H

/* base includes */
#include <glib-object.h>
#include <thrift/c_glib/thrift_struct.h>
#include <thrift/c_glib/protocol/thrift_protocol.h>
/* custom thrift includes */

/* begin types */

enum _predicate_arg_type_T {
  PREDICATE_ARG_TYPE__T_LITERAL_T = 0,
  PREDICATE_ARG_TYPE__T_REFERENCE_T = 1
};
typedef enum _predicate_arg_type_T predicate_arg_type_T;

/* return the name of the constant */
const char *
toString_predicate_arg_type_T(int value); 

enum _predicate_type_T {
  PREDICATE_TYPE__T_COMPARISON_T = 0,
  PREDICATE_TYPE__T_STR_MATCH_T = 1,
  PREDICATE_TYPE__T_COMPOUND_T = 2
};
typedef enum _predicate_type_T predicate_type_T;

/* return the name of the constant */
const char *
toString_predicate_type_T(int value); 

enum _literal_type_T {
  LITERAL_TYPE__T_LIT_INTEGER_T = 0,
  LITERAL_TYPE__T_LIT_STRING_T = 1,
  LITERAL_TYPE__T_LIT_BOOLEAN_T = 2,
  LITERAL_TYPE__T_LIT_FLOAT_T = 3,
  LITERAL_TYPE__T_LIT_NONE_T = 4
};
typedef enum _literal_type_T literal_type_T;

/* return the name of the constant */
const char *
toString_literal_type_T(int value); 

enum _status_code_T {
  STATUS_CODE__T_OK = 0,
  STATUS_CODE__T_TABLE_NOT_FOUND = 1,
  STATUS_CODE__T_BAD_REQUEST = 2,
  STATUS_CODE__T_INTERNAL_ERROR = 3
};
typedef enum _status_code_T status_code_T;

/* return the name of the constant */
const char *
toString_status_code_T(int value); 

/* struct types_T */
struct _types_T
{ 
  ThriftStruct parent; 

  /* public */
  gint32 boolean;
  gboolean __isset_boolean;
  gint32 num;
  gboolean __isset_num;
  gdouble flt;
  gboolean __isset_flt;
  gchar * str;
  gboolean __isset_str;
};
typedef struct _types_T types_T;

struct _types_TClass
{
  ThriftStructClass parent;
};
typedef struct _types_TClass types_TClass;

GType types__t_get_type (void);
#define TYPE_TYPES__T (types__t_get_type())
#define TYPES__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_TYPES__T, types_T))
#define TYPES__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_TYPES__T, types_TClass))
#define IS_TYPES__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_TYPES__T))
#define IS_TYPES__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_TYPES__T))
#define TYPES__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_TYPES__T, types_TClass))

/* struct columnref_T */
struct _columnref_T
{ 
  ThriftStruct parent; 

  /* public */
  gchar * table_name;
  gboolean __isset_table_name;
  gchar * col_name;
  gboolean __isset_col_name;
};
typedef struct _columnref_T columnref_T;

struct _columnref_TClass
{
  ThriftStructClass parent;
};
typedef struct _columnref_TClass columnref_TClass;

GType columnref__t_get_type (void);
#define TYPE_COLUMNREF__T (columnref__t_get_type())
#define COLUMNREF__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMNREF__T, columnref_T))
#define COLUMNREF__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMNREF__T, columnref_TClass))
#define IS_COLUMNREF__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMNREF__T))
#define IS_COLUMNREF__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMNREF__T))
#define COLUMNREF__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMNREF__T, columnref_TClass))

/* struct literal_T */
struct _literal_T
{ 
  ThriftStruct parent; 

  /* public */
  literal_type_T type;
  gboolean __isset_type;
  types_T * value;
  gboolean __isset_value;
};
typedef struct _literal_T literal_T;

struct _literal_TClass
{
  ThriftStructClass parent;
};
typedef struct _literal_TClass literal_TClass;

GType literal__t_get_type (void);
#define TYPE_LITERAL__T (literal__t_get_type())
#define LITERAL__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_LITERAL__T, literal_T))
#define LITERAL__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_LITERAL__T, literal_TClass))
#define IS_LITERAL__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_LITERAL__T))
#define IS_LITERAL__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_LITERAL__T))
#define LITERAL__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_LITERAL__T, literal_TClass))

/* struct predicate_arg_union_T */
struct _predicate_arg_union_T
{ 
  ThriftStruct parent; 

  /* public */
  literal_T * literal;
  gboolean __isset_literal;
  columnref_T * ref;
  gboolean __isset_ref;
};
typedef struct _predicate_arg_union_T predicate_arg_union_T;

struct _predicate_arg_union_TClass
{
  ThriftStructClass parent;
};
typedef struct _predicate_arg_union_TClass predicate_arg_union_TClass;

GType predicate_arg_union__t_get_type (void);
#define TYPE_PREDICATE_ARG_UNION__T (predicate_arg_union__t_get_type())
#define PREDICATE_ARG_UNION__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PREDICATE_ARG_UNION__T, predicate_arg_union_T))
#define PREDICATE_ARG_UNION__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PREDICATE_ARG_UNION__T, predicate_arg_union_TClass))
#define IS_PREDICATE_ARG_UNION__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PREDICATE_ARG_UNION__T))
#define IS_PREDICATE_ARG_UNION__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PREDICATE_ARG_UNION__T))
#define PREDICATE_ARG_UNION__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PREDICATE_ARG_UNION__T, predicate_arg_union_TClass))

/* struct columndef_T */
struct _columndef_T
{ 
  ThriftStruct parent; 

  /* public */
  gchar * column_name;
  gboolean __isset_column_name;
  gint32 type;
  gboolean __isset_type;
};
typedef struct _columndef_T columndef_T;

struct _columndef_TClass
{
  ThriftStructClass parent;
};
typedef struct _columndef_TClass columndef_TClass;

GType columndef__t_get_type (void);
#define TYPE_COLUMNDEF__T (columndef__t_get_type())
#define COLUMNDEF__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_COLUMNDEF__T, columndef_T))
#define COLUMNDEF__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_COLUMNDEF__T, columndef_TClass))
#define IS_COLUMNDEF__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_COLUMNDEF__T))
#define IS_COLUMNDEF__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_COLUMNDEF__T))
#define COLUMNDEF__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_COLUMNDEF__T, columndef_TClass))

/* struct predicate_arg_T */
struct _predicate_arg_T
{ 
  ThriftStruct parent; 

  /* public */
  predicate_arg_type_T type;
  gboolean __isset_type;
  predicate_arg_union_T * arg;
  gboolean __isset_arg;
};
typedef struct _predicate_arg_T predicate_arg_T;

struct _predicate_arg_TClass
{
  ThriftStructClass parent;
};
typedef struct _predicate_arg_TClass predicate_arg_TClass;

GType predicate_arg__t_get_type (void);
#define TYPE_PREDICATE_ARG__T (predicate_arg__t_get_type())
#define PREDICATE_ARG__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PREDICATE_ARG__T, predicate_arg_T))
#define PREDICATE_ARG__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PREDICATE_ARG__T, predicate_arg_TClass))
#define IS_PREDICATE_ARG__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PREDICATE_ARG__T))
#define IS_PREDICATE_ARG__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PREDICATE_ARG__T))
#define PREDICATE_ARG__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PREDICATE_ARG__T, predicate_arg_TClass))

/* struct predicate_T */
struct _predicate_T
{ 
  ThriftStruct parent; 

  /* public */
  predicate_type_T type;
  gboolean __isset_type;
  columnref_T * column;
  gboolean __isset_column;
  gint32 cmp_type;
  gboolean __isset_cmp_type;
  predicate_arg_T * arg;
  gboolean __isset_arg;
  gint32 predicate_op;
  gboolean __isset_predicate_op;
  GPtrArray * left;
  gboolean __isset_left;
  GPtrArray * right;
  gboolean __isset_right;
};
typedef struct _predicate_T predicate_T;

struct _predicate_TClass
{
  ThriftStructClass parent;
};
typedef struct _predicate_TClass predicate_TClass;

GType predicate__t_get_type (void);
#define TYPE_PREDICATE__T (predicate__t_get_type())
#define PREDICATE__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_PREDICATE__T, predicate_T))
#define PREDICATE__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_PREDICATE__T, predicate_TClass))
#define IS_PREDICATE__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_PREDICATE__T))
#define IS_PREDICATE__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_PREDICATE__T))
#define PREDICATE__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_PREDICATE__T, predicate_TClass))

/* struct join_stmt_T */
struct _join_stmt_T
{ 
  ThriftStruct parent; 

  /* public */
  gchar * join_on_table;
  gboolean __isset_join_on_table;
  predicate_T * join_predicate;
  gboolean __isset_join_predicate;
};
typedef struct _join_stmt_T join_stmt_T;

struct _join_stmt_TClass
{
  ThriftStructClass parent;
};
typedef struct _join_stmt_TClass join_stmt_TClass;

GType join_stmt__t_get_type (void);
#define TYPE_JOIN_STMT__T (join_stmt__t_get_type())
#define JOIN_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_JOIN_STMT__T, join_stmt_T))
#define JOIN_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_JOIN_STMT__T, join_stmt_TClass))
#define IS_JOIN_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_JOIN_STMT__T))
#define IS_JOIN_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_JOIN_STMT__T))
#define JOIN_STMT__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_JOIN_STMT__T, join_stmt_TClass))

/* struct select_stmt_T */
struct _select_stmt_T
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * columns;
  gboolean __isset_columns;
  predicate_T * predicate;
  gboolean __isset_predicate;
  join_stmt_T * join_stmt;
  gboolean __isset_join_stmt;
};
typedef struct _select_stmt_T select_stmt_T;

struct _select_stmt_TClass
{
  ThriftStructClass parent;
};
typedef struct _select_stmt_TClass select_stmt_TClass;

GType select_stmt__t_get_type (void);
#define TYPE_SELECT_STMT__T (select_stmt__t_get_type())
#define SELECT_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SELECT_STMT__T, select_stmt_T))
#define SELECT_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SELECT_STMT__T, select_stmt_TClass))
#define IS_SELECT_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SELECT_STMT__T))
#define IS_SELECT_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SELECT_STMT__T))
#define SELECT_STMT__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SELECT_STMT__T, select_stmt_TClass))

/* struct insert_stmt_T */
struct _insert_stmt_T
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * columns;
  gboolean __isset_columns;
  GPtrArray * literals;
  gboolean __isset_literals;
};
typedef struct _insert_stmt_T insert_stmt_T;

struct _insert_stmt_TClass
{
  ThriftStructClass parent;
};
typedef struct _insert_stmt_TClass insert_stmt_TClass;

GType insert_stmt__t_get_type (void);
#define TYPE_INSERT_STMT__T (insert_stmt__t_get_type())
#define INSERT_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_INSERT_STMT__T, insert_stmt_T))
#define INSERT_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_INSERT_STMT__T, insert_stmt_TClass))
#define IS_INSERT_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_INSERT_STMT__T))
#define IS_INSERT_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_INSERT_STMT__T))
#define INSERT_STMT__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_INSERT_STMT__T, insert_stmt_TClass))

/* struct create_stmt_T */
struct _create_stmt_T
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * defs;
  gboolean __isset_defs;
};
typedef struct _create_stmt_T create_stmt_T;

struct _create_stmt_TClass
{
  ThriftStructClass parent;
};
typedef struct _create_stmt_TClass create_stmt_TClass;

GType create_stmt__t_get_type (void);
#define TYPE_CREATE_STMT__T (create_stmt__t_get_type())
#define CREATE_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_CREATE_STMT__T, create_stmt_T))
#define CREATE_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_CREATE_STMT__T, create_stmt_TClass))
#define IS_CREATE_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_CREATE_STMT__T))
#define IS_CREATE_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_CREATE_STMT__T))
#define CREATE_STMT__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_CREATE_STMT__T, create_stmt_TClass))

/* struct set_value_T */
struct _set_value_T
{ 
  ThriftStruct parent; 

  /* public */
  columnref_T * col;
  gboolean __isset_col;
  literal_T * lit;
  gboolean __isset_lit;
};
typedef struct _set_value_T set_value_T;

struct _set_value_TClass
{
  ThriftStructClass parent;
};
typedef struct _set_value_TClass set_value_TClass;

GType set_value__t_get_type (void);
#define TYPE_SET_VALUE__T (set_value__t_get_type())
#define SET_VALUE__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SET_VALUE__T, set_value_T))
#define SET_VALUE__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SET_VALUE__T, set_value_TClass))
#define IS_SET_VALUE__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SET_VALUE__T))
#define IS_SET_VALUE__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SET_VALUE__T))
#define SET_VALUE__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SET_VALUE__T, set_value_TClass))

/* struct update_stmt_T */
struct _update_stmt_T
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * set_value_list;
  gboolean __isset_set_value_list;
  predicate_T * predicate;
  gboolean __isset_predicate;
};
typedef struct _update_stmt_T update_stmt_T;

struct _update_stmt_TClass
{
  ThriftStructClass parent;
};
typedef struct _update_stmt_TClass update_stmt_TClass;

GType update_stmt__t_get_type (void);
#define TYPE_UPDATE_STMT__T (update_stmt__t_get_type())
#define UPDATE_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_UPDATE_STMT__T, update_stmt_T))
#define UPDATE_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_UPDATE_STMT__T, update_stmt_TClass))
#define IS_UPDATE_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_UPDATE_STMT__T))
#define IS_UPDATE_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_UPDATE_STMT__T))
#define UPDATE_STMT__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_UPDATE_STMT__T, update_stmt_TClass))

/* struct delete_stmt_T */
struct _delete_stmt_T
{ 
  ThriftStruct parent; 

  /* public */
  predicate_T * predicate;
  gboolean __isset_predicate;
};
typedef struct _delete_stmt_T delete_stmt_T;

struct _delete_stmt_TClass
{
  ThriftStructClass parent;
};
typedef struct _delete_stmt_TClass delete_stmt_TClass;

GType delete_stmt__t_get_type (void);
#define TYPE_DELETE_STMT__T (delete_stmt__t_get_type())
#define DELETE_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DELETE_STMT__T, delete_stmt_T))
#define DELETE_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DELETE_STMT__T, delete_stmt_TClass))
#define IS_DELETE_STMT__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DELETE_STMT__T))
#define IS_DELETE_STMT__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DELETE_STMT__T))
#define DELETE_STMT__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DELETE_STMT__T, delete_stmt_TClass))

/* struct statement_union_T */
struct _statement_union_T
{ 
  ThriftStruct parent; 

  /* public */
  select_stmt_T * select_stmt;
  gboolean __isset_select_stmt;
  insert_stmt_T * insert_stmt;
  gboolean __isset_insert_stmt;
  update_stmt_T * update_stmt;
  gboolean __isset_update_stmt;
  create_stmt_T * create_stmt;
  gboolean __isset_create_stmt;
  delete_stmt_T * delete_stmt;
  gboolean __isset_delete_stmt;
};
typedef struct _statement_union_T statement_union_T;

struct _statement_union_TClass
{
  ThriftStructClass parent;
};
typedef struct _statement_union_TClass statement_union_TClass;

GType statement_union__t_get_type (void);
#define TYPE_STATEMENT_UNION__T (statement_union__t_get_type())
#define STATEMENT_UNION__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STATEMENT_UNION__T, statement_union_T))
#define STATEMENT_UNION__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_STATEMENT_UNION__T, statement_union_TClass))
#define IS_STATEMENT_UNION__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STATEMENT_UNION__T))
#define IS_STATEMENT_UNION__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_STATEMENT_UNION__T))
#define STATEMENT_UNION__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STATEMENT_UNION__T, statement_union_TClass))

/* struct statement_T */
struct _statement_T
{ 
  ThriftStruct parent; 

  /* public */
  statement_union_T * stmt;
  gboolean __isset_stmt;
  gint32 stmt_type;
  gboolean __isset_stmt_type;
  gchar * table_name;
  gboolean __isset_table_name;
};
typedef struct _statement_T statement_T;

struct _statement_TClass
{
  ThriftStructClass parent;
};
typedef struct _statement_TClass statement_TClass;

GType statement__t_get_type (void);
#define TYPE_STATEMENT__T (statement__t_get_type())
#define STATEMENT__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_STATEMENT__T, statement_T))
#define STATEMENT__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_STATEMENT__T, statement_TClass))
#define IS_STATEMENT__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_STATEMENT__T))
#define IS_STATEMENT__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_STATEMENT__T))
#define STATEMENT__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_STATEMENT__T, statement_TClass))

/* struct row_T */
struct _row_T
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * value;
  gboolean __isset_value;
};
typedef struct _row_T row_T;

struct _row_TClass
{
  ThriftStructClass parent;
};
typedef struct _row_TClass row_TClass;

GType row__t_get_type (void);
#define TYPE_ROW__T (row__t_get_type())
#define ROW__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ROW__T, row_T))
#define ROW__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ROW__T, row_TClass))
#define IS_ROW__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ROW__T))
#define IS_ROW__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ROW__T))
#define ROW__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ROW__T, row_TClass))

/* struct item_list_T */
struct _item_list_T
{ 
  ThriftStruct parent; 

  /* public */
  GPtrArray * schema;
  gboolean __isset_schema;
  GPtrArray * rows;
  gboolean __isset_rows;
};
typedef struct _item_list_T item_list_T;

struct _item_list_TClass
{
  ThriftStructClass parent;
};
typedef struct _item_list_TClass item_list_TClass;

GType item_list__t_get_type (void);
#define TYPE_ITEM_LIST__T (item_list__t_get_type())
#define ITEM_LIST__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_ITEM_LIST__T, item_list_T))
#define ITEM_LIST__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_ITEM_LIST__T, item_list_TClass))
#define IS_ITEM_LIST__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_ITEM_LIST__T))
#define IS_ITEM_LIST__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_ITEM_LIST__T))
#define ITEM_LIST__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_ITEM_LIST__T, item_list_TClass))

/* struct server_response_T */
struct _server_response_T
{ 
  ThriftStruct parent; 

  /* public */
  status_code_T status;
  gboolean __isset_status;
  gchar * msg;
  gboolean __isset_msg;
  item_list_T * items;
  gboolean __isset_items;
};
typedef struct _server_response_T server_response_T;

struct _server_response_TClass
{
  ThriftStructClass parent;
};
typedef struct _server_response_TClass server_response_TClass;

GType server_response__t_get_type (void);
#define TYPE_SERVER_RESPONSE__T (server_response__t_get_type())
#define SERVER_RESPONSE__T(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_SERVER_RESPONSE__T, server_response_T))
#define SERVER_RESPONSE__T_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_SERVER_RESPONSE__T, server_response_TClass))
#define IS_SERVER_RESPONSE__T(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_SERVER_RESPONSE__T))
#define IS_SERVER_RESPONSE__T_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_SERVER_RESPONSE__T))
#define SERVER_RESPONSE__T_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_SERVER_RESPONSE__T, server_response_TClass))

/* constants */

/* struct data_exchange_serviceExecuteArgs */
struct _data_exchange_serviceExecuteArgs
{ 
  ThriftStruct parent; 

  /* public */
  statement_T * stmt;
  gboolean __isset_stmt;
};
typedef struct _data_exchange_serviceExecuteArgs data_exchange_serviceExecuteArgs;

struct _data_exchange_serviceExecuteArgsClass
{
  ThriftStructClass parent;
};
typedef struct _data_exchange_serviceExecuteArgsClass data_exchange_serviceExecuteArgsClass;

GType data_exchange_service_execute_args_get_type (void);
#define TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS (data_exchange_service_execute_args_get_type())
#define DATA_EXCHANGE_SERVICE_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS, data_exchange_serviceExecuteArgs))
#define DATA_EXCHANGE_SERVICE_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS, data_exchange_serviceExecuteArgsClass))
#define IS_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS))
#define IS_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS))
#define DATA_EXCHANGE_SERVICE_EXECUTE_ARGS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_ARGS, data_exchange_serviceExecuteArgsClass))

/* struct data_exchange_serviceExecuteResult */
struct _data_exchange_serviceExecuteResult
{ 
  ThriftStruct parent; 

  /* public */
  server_response_T * success;
  gboolean __isset_success;
};
typedef struct _data_exchange_serviceExecuteResult data_exchange_serviceExecuteResult;

struct _data_exchange_serviceExecuteResultClass
{
  ThriftStructClass parent;
};
typedef struct _data_exchange_serviceExecuteResultClass data_exchange_serviceExecuteResultClass;

GType data_exchange_service_execute_result_get_type (void);
#define TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT (data_exchange_service_execute_result_get_type())
#define DATA_EXCHANGE_SERVICE_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT, data_exchange_serviceExecuteResult))
#define DATA_EXCHANGE_SERVICE_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), _TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT, data_exchange_serviceExecuteResultClass))
#define IS_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT))
#define IS_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT))
#define DATA_EXCHANGE_SERVICE_EXECUTE_RESULT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_DATA_EXCHANGE_SERVICE_EXECUTE_RESULT, data_exchange_serviceExecuteResultClass))

#endif /* STRUCTS_TYPES_H */
